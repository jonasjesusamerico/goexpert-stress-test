// Code generated by mockery v2.43.0. DO NOT EDIT.

package mock

import (
	domain "github.com/jonasjesusamerico/goexpert-stress-test/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// LoadTester is an autogenerated mock type for the LoadTester type
type LoadTester struct {
	mock.Mock
}

type LoadTester_Expecter struct {
	mock *mock.Mock
}

func (_m *LoadTester) EXPECT() *LoadTester_Expecter {
	return &LoadTester_Expecter{mock: &_m.Mock}
}

// RunTest provides a mock function with given fields: config
func (_m *LoadTester) RunTest(config domain.Config) domain.Result {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for RunTest")
	}

	var r0 domain.Result
	if rf, ok := ret.Get(0).(func(domain.Config) domain.Result); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Get(0).(domain.Result)
	}

	return r0
}

// LoadTester_RunTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTest'
type LoadTester_RunTest_Call struct {
	*mock.Call
}

// RunTest is a helper method to define mock.On call
//   - config domain.Config
func (_e *LoadTester_Expecter) RunTest(config interface{}) *LoadTester_RunTest_Call {
	return &LoadTester_RunTest_Call{Call: _e.mock.On("RunTest", config)}
}

func (_c *LoadTester_RunTest_Call) Run(run func(config domain.Config)) *LoadTester_RunTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Config))
	})
	return _c
}

func (_c *LoadTester_RunTest_Call) Return(_a0 domain.Result) *LoadTester_RunTest_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LoadTester_RunTest_Call) RunAndReturn(run func(domain.Config) domain.Result) *LoadTester_RunTest_Call {
	_c.Call.Return(run)
	return _c
}

// NewTester creates a new instance of LoadTester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTester(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoadTester {
	mock := &LoadTester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
